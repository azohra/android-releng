apply plugin: 'jacoco'

jacoco {
    toolVersion = deps.version.jacoco
    reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

//noinspection GroovyAssignabilityCheck
task jacocoFullReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugAndroidTestCoverageReport']) {
    doLast {
        group = "Reporting"
        description = "Generate consolidated Jacoco coverage reports, includes all types of tests"

        reports {
            xml.enabled = true
            html.enabled = true
            html.destination file("${buildDir}/jacocoHtml")
        }

        def fileFilter = ['**/R.class',
                          '**/R$*.class',
                          '**/BuildConfig.*',
                          '**/Manifest*.*',
                          'android/**/*.*',
                          '**/Lambda$*.class',
                          '**/Lambda.class',
                          '**/*Lambda.class',
                          '**/*Lambda*.class',
                          '**/*Lambda*.*',
                          '**/*Builder.*',
                          '**/*_MembersInjector.class',
                          '**/*_MembersInjector*.*',
                          '**/*_*Factory*.*',
                          '**/*Component*.*',
                          '**/*Module*.*',
                          '**/*Realm*.*'
        ]
        def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = fileTree(dir: project.buildDir, includes: ['**/*.exec', '**/*.ec'])
    }
}
